[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 lazytest authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kirill Müller. Author, maintainer. cynkra GmbH. Funder, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Müller K (2023). lazytest: Runs Failed Tests. https://github.com/krlmlr/lazytest, https://cynkra.github.io/lazytest/.","code":"@Manual{,   title = {lazytest: Runs Only Failed Tests},   author = {Kirill Müller},   year = {2023},   note = {https://github.com/krlmlr/lazytest, https://cynkra.github.io/lazytest/}, }"},{"path":"/index.html","id":"lazytest","dir":"","previous_headings":"","what":"Runs Only Failed Tests","title":"Runs Only Failed Tests","text":"goal lazytest save development time helping rerun tests failed last run. integrates tightly testthat package provides lazytest_local() function, drop-replacement testthat::test_local(), memoizes tests failed; runs tests subsequent runs. active tests succeeded, entire test suite run second pass.","code":"library(lazytest)"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Runs Only Failed Tests","text":"Call lazytest_local() instead testthat::test_local() devtools::test(): package also provides RStudio add-ins run tests new terminal. Unfortunately, “Test package” command hard-wired devtools::test(), seems way customize hook .","code":"lazytest::lazytest_local()"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Runs Only Failed Tests","text":"Let’s create package two boilerplate tests. run tests, pass. Now replace one tests failing test, run tests, file created failing test name: Next time run tests, test run, fixed point tests run check failure introduced elsewhere.","code":"withr::local_options(usethis.quiet = TRUE)  pkg_parent_dir <- withr::local_tempdir() pkg_dir <- file.path(pkg_parent_dir, \"tea\") usethis::create_package(pkg_dir) usethis::with_project(path = pkg_dir, {   usethis::use_testthat()   usethis::use_test(\"blop\")   usethis::use_test(\"blip\") }) withr::with_dir(   pkg_dir,   lazytest::lazytest_local() ) #> ℹ Testing all tests. #> ✔ | F W S  OK | Context #> ⠏ |         0 | blip                                                            ✔ |         1 | blip #> ⠏ |         0 | blop                                                            ✔ |         1 | blop #>  #> ══ Results ═════════════════════════════════════════════════════════════════════ #> [ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ] #> → Testing all tests next time. brio::write_lines(   text =  c(     'test_that(\"blop() works\", {',     'expect_equal(2 * 2, 42)',     '})'   ),   path = file.path(pkg_dir, \"tests\", \"testthat\", \"test-blop.R\") ) withr::with_dir(   pkg_dir,   lazytest::lazytest_local() ) #> ℹ Testing all tests. #> ✔ | F W S  OK | Context #> ⠏ |         0 | blip                                                            ✔ |         1 | blip #> ⠏ |         0 | blop                                                            ⠋ | 1       0 | blop                                                            ✖ | 1       0 | blop [0.2s] #> ──────────────────────────────────────────────────────────────────────────────── #> Failure (test-blop.R:2:1): blop() works #> 2 * 2 (`actual`) not equal to 42 (`expected`). #>  #>   `actual`:  4 #> `expected`: 42 #> ──────────────────────────────────────────────────────────────────────────────── #>  #> ══ Results ═════════════════════════════════════════════════════════════════════ #> Duration: 0.3 s #>  #> [ FAIL 1 | WARN 0 | SKIP 0 | PASS 1 ] #> → Testing the following tests next time: #> • blop #> Error: Test failures brio::read_lines(file.path(pkg_dir, \".lazytest\")) #> [1] \"blop\" withr::with_dir(   pkg_dir,   lazytest::lazytest_local() ) #> ℹ Testing only tests that failed last time: #> • blop #> ✔ | F W S  OK | Context #> ⠏ |         0 | blop                                                            ✖ | 1       0 | blop #> ──────────────────────────────────────────────────────────────────────────────── #> Failure (test-blop.R:2:1): blop() works #> 2 * 2 (`actual`) not equal to 42 (`expected`). #>  #>   `actual`:  4 #> `expected`: 42 #> ──────────────────────────────────────────────────────────────────────────────── #>  #> ══ Results ═════════════════════════════════════════════════════════════════════ #> [ FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ] #> → Repeating the same tests next time. #> Error: Test failures"},{"path":"/index.html","id":"how-does-it-work","dir":"","previous_headings":"","what":"How does it work?","title":"Runs Only Failed Tests","text":"testthat::test_local() returns object tests failed can retrieved. lazytest_local() wraps function. tests failed, file named .lazytest written package directory. next call, .lazytest exists, consulted, suitable filter argument constructed passed testthat::test_local(). tests passed tests run, second call testthat::test_local() initiated, make sure failures introduced meantime.","code":""},{"path":"/index.html","id":"installation-and-optional-setup","dir":"","previous_headings":"","what":"Installation and optional setup","title":"Runs Only Failed Tests","text":"can install development version lazytest cynkra R-universe: GitHub: ’re using RStudio, good idea remap shortcut running tests (default: Ctrl + Shift + T / Cmd + Shift + T). add-provides two commands: Run Lazy Tests New Terminal (recommended mapping: Ctrl + Shift + T / Cmd + Shift + T) Reset Run Lazy Tests New Terminal (recommended mapping: Ctrl + T / Cmd + T) allows keep workflows ’re accustomed benefit immediately. RStudio shortcut configuration","code":"install.packages('lazytest', repos = c('https://cynkra.r-universe.dev', 'https://cloud.r-project.org')) pak::pak(\"krlmlr/lazytest\")"},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Runs Only Failed Tests","text":"Please note lazytest project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/reference/lazytest-package.html","id":null,"dir":"Reference","previous_headings":"","what":"lazytest: Runs Only Failed Tests — lazytest-package","title":"lazytest: Runs Only Failed Tests — lazytest-package","text":"companion package testthat package saves development time helping rerun tests failed last run.","code":""},{"path":[]},{"path":"/reference/lazytest-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"lazytest: Runs Only Failed Tests — lazytest-package","text":"Maintainer: Kirill Müller kirill@cynkra.com (ORCID) contributors: cynkra GmbH mail@cynkra.com [funder, copyright holder]","code":""},{"path":"/reference/lazytest_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Test a local source package — lazytest_local","title":"Test a local source package — lazytest_local","text":"drop-replacement testthat::test_local() default reruns tests failed last time.","code":""},{"path":"/reference/lazytest_local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test a local source package — lazytest_local","text":"","code":"lazytest_local(   path = \".\",   reporter = NULL,   ...,   lazytest_reset = FALSE,   stop_on_failure = TRUE,   stop_on_warning = FALSE,   filter = NULL,   load_package = \"source\" )"},{"path":"/reference/lazytest_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test a local source package — lazytest_local","text":"path Path directory containing tests. reporter Reporter use summarise output. Can supplied string (e.g. \"summary\") R6 object (e.g. SummaryReporter$new()). See Reporter details list built-reporters. ... Additional arguments passed test_dir() lazytest_reset Set TRUE run tests, regardless last test results . stop_on_failure TRUE, throw error tests fail. stop_on_warning TRUE, throw error tests generate warnings. filter Must NULL. load_package Strategy use load package code: \"none\", default, load package. \"installed\", uses library() load installed package. \"source\", uses pkgload::load_all() source package. configure arguments passed load_all(), add field DESCRIPTION file:","code":"Config/testthat/load-all: list(export_all = FALSE, helpers = FALSE)"},{"path":"/reference/lazytest_local.html","id":"example","dir":"Reference","previous_headings":"","what":"Example","title":"Test a local source package — lazytest_local","text":"create package two boilerplate tests.   run tests, pass.   Now replace one tests failing test,   run tests,   file created failing test name:   Next time run tests, test run, fixed point tests run check failure introduced elsewhere.","code":"withr::local_options(usethis.quiet = TRUE)  pkg_parent_dir <- withr::local_tempdir() pkg_dir <- file.path(pkg_parent_dir, \"tea\") usethis::create_package(pkg_dir) usethis::with_project(path = pkg_dir, {   usethis::use_testthat()   usethis::use_test(\"blop\")   usethis::use_test(\"blip\") }) withr::with_dir(   pkg_dir,   lazytest::lazytest_local() ) #> i Testing all tests. #> v | F W S  OK | Context #>  #> / |         0 | blip                                                             #> v |         1 | blip #>  #> / |         0 | blop                                                             #> v |         1 | blop #>  #> == Results ===================================================================== #> Duration: 0.1 s #>  #> [ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ] #> > Testing all tests next time. brio::write_lines(   text =  c(     'test_that(\"blop() works\", {',     'expect_equal(2 * 2, 42)',     '})'   ),   path = file.path(pkg_dir, \"tests\", \"testthat\", \"test-blop.R\") ) withr::with_dir(   pkg_dir,   lazytest::lazytest_local() ) #> i Testing all tests. #> v | F W S  OK | Context #>  #> / |         0 | blip                                                             #> v |         1 | blip #>  #> / |         0 | blop                                                             #> - | 1       0 | blop                                                             #> x | 1       0 | blop [0.2s] #> -------------------------------------------------------------------------------- #> Failure ('test-blop.R:2:1'): blop() works #> 2 * 2 (`actual`) not equal to 42 (`expected`). #>  #>   `actual`:  4 #> `expected`: 42 #> -------------------------------------------------------------------------------- #>  #> == Results ===================================================================== #> Duration: 0.3 s #>  #> [ FAIL 1 | WARN 0 | SKIP 0 | PASS 1 ] #> > Testing the following tests next time: #> * blop #> Error: Test failures brio::read_lines(file.path(pkg_dir, \".lazytest\")) #> [1] \"blop\" withr::with_dir(   pkg_dir,   lazytest::lazytest_local() ) #> i Testing only tests that failed last time: #> * blop #> v | F W S  OK | Context #>  #> / |         0 | blop                                                             #> x | 1       0 | blop #> -------------------------------------------------------------------------------- #> Failure ('test-blop.R:2:1'): blop() works #> 2 * 2 (`actual`) not equal to 42 (`expected`). #>  #>   `actual`:  4 #> `expected`: 42 #> -------------------------------------------------------------------------------- #>  #> == Results ===================================================================== #> [ FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ] #> > Repeating the same tests next time. #> Error: Test failures"},{"path":[]},{"path":"/news/index.html","id":"documentation-0-0-0-9006","dir":"Changelog","previous_headings":"","what":"Documentation","title":"lazytest 0.0.0.9006 (2023-04-15)","text":"Minimal README tweaks (#8). Cynkratemplate::use_cynkra_pkgdown() (#6).","code":""},{"path":"/news/index.html","id":"tests-0-0-0-9006","dir":"Changelog","previous_headings":"","what":"tests","title":"lazytest 0.0.0.9006 (2023-04-15)","text":"Add test infra one test (@maelle, #9).","code":""},{"path":"/news/index.html","id":"lazytest-0009005-2023-03-24","dir":"Changelog","previous_headings":"","what":"lazytest 0.0.0.9005 (2023-03-24)","title":"lazytest 0.0.0.9005 (2023-03-24)","text":"Internal changes .","code":""},{"path":"/news/index.html","id":"lazytest-0009004-2023-02-17","dir":"Changelog","previous_headings":"","what":"lazytest 0.0.0.9004 (2023-02-17)","title":"lazytest 0.0.0.9004 (2023-02-17)","text":"Internal changes .","code":""},{"path":[]},{"path":"/news/index.html","id":"documentation-0-0-0-9003","dir":"Changelog","previous_headings":"","what":"Documentation","title":"lazytest 0.0.0.9003 (2023-02-15)","text":"Fix wording.","code":""},{"path":"/news/index.html","id":"lazytest-0009002-2023-02-13","dir":"Changelog","previous_headings":"","what":"lazytest 0.0.0.9002 (2023-02-13)","title":"lazytest 0.0.0.9002 (2023-02-13)","text":"Internal changes .","code":""},{"path":"/news/index.html","id":"lazytest-0009001-2023-02-12","dir":"Changelog","previous_headings":"","what":"lazytest 0.0.0.9001 (2023-02-12)","title":"lazytest 0.0.0.9001 (2023-02-12)","text":"Initial version lazytest_local().","code":""}]
